plugins {
    id 'java'
    id 'war'
}
war {
    webAppDirName = 'src/main/webapp'
    archiveBaseName.set('ROOT')
}

def tomcatWebapps = "C:/Program Files/Apache Software Foundation/Tomcat 11.0_Tomcat8111/webapps"   // ‚¨Ö Replace with your Tomcat webapps folder
def tomcatBin = "C:/Program Files/Apache Software Foundation/Tomcat 11.0_Tomcat8111/bin"            // ‚¨Ö Replace with your Tomcat bin folder
tasks.register("deployToTomcat") {
    dependsOn tasks.named("war")

    doLast {
        def rootWar = file("${tomcatWebapps}/ROOT.war")
        def rootFolder = file("${tomcatWebapps}/ROOT")

        println "Stopping Tomcat..."
        exec {
            workingDir tomcatBin
            commandLine 'cmd', '/c', 'catalina.bat', 'stop'
            ignoreExitValue = true
        }

        println "Deleting old ROOT..."
        if (rootFolder.exists()) {
            rootFolder.deleteDir()
        }
        if (rootWar.exists()) {
            rootWar.delete()
        }

        println "Copying new ROOT.war..."
        copy {
            from(tasks.named("war").get().archiveFile)
            into(tomcatWebapps)
            rename { "ROOT.war" }
        }

        println "Starting Tomcat..."
        exec {
            workingDir tomcatBin
            commandLine 'cmd', '/c', 'catalina.bat', 'start'
        }

        println "‚úÖ Deployment completed."
    }
}

//def tomcatWebapps = file("C:/Program Files/Apache Software Foundation/Tomcat 11.0_Tomcat8111/webapps")
//def tomcatBin = file("C:/Program Files/Apache Software Foundation/Tomcat 11.0_Tomcat8111/bin")
def tomcatPort = 8111  // change if needed

tasks.register("deployToTomcatInIntelliJ") {
    dependsOn tasks.named("war")

    doLast {
        println "üîç Checking for existing Tomcat process on port ${tomcatPort}..."
        exec {
            commandLine "powershell", "-Command", """
                \$tomcatPid = (Get-NetTCPConnection -LocalPort ${tomcatPort} -ErrorAction SilentlyContinue).OwningProcess
                if (\$tomcatPid) { 
                    Write-Host 'Stopping process ID:' \$tomcatPid
                    Stop-Process -Id \$tomcatPid -Force
                    Start-Sleep -Seconds 2
                } else {
                    Write-Host 'No process found on port ${tomcatPort}'
                }
            """
            ignoreExitValue = true
        }

        def rootWar = file("${tomcatWebapps}/ROOT.war")
        def rootFolder = file("${tomcatWebapps}/ROOT")

        println "üóë Deleting old ROOT..."
        if (rootFolder.exists()) rootFolder.deleteDir()
        if (rootWar.exists()) rootWar.delete()

        println "üì¶ Copying new ROOT.war..."
        copy {
            from(tasks.named("war").get().archiveFile)
            into(tomcatWebapps)
            rename { "ROOT.war" }
        }

        println "üöÄ Starting Tomcat in IntelliJ terminal (Press STOP to shut it down)..."
        exec {
            workingDir tomcatBin
            commandLine "cmd", "/c", "catalina.bat run"
            standardOutput = System.out
            errorOutput = System.err
        }
    }
}

group = 'org.springframework'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {

    // ================= TESTING =================
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // ================= SPRING CORE =================
    implementation 'org.springframework:spring-context:6.1.4'
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'

    // ================= AOP =================
    implementation 'org.springframework:spring-aop:6.2.1'
    implementation 'org.aspectj:aspectjweaver:1.9.24'

    // ================= LOGGING =================
    implementation 'org.slf4j:slf4j-api:2.0.17'
    implementation 'org.apache.logging.log4j:log4j-api:2.25.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.25.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.25.0'

    // ================= SPRING MVC =================
    implementation 'org.springframework:spring-webmvc:6.1.4'
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.2'

    // ================= SPRING ORM / JPA =================
    implementation 'org.springframework:spring-orm:6.1.4'
    implementation 'org.springframework.data:spring-data-jpa:3.2.4'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'org.hibernate.orm:hibernate-core:6.4.4.Final'

    // ================= DATABASE =================
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'com.zaxxer:HikariCP:5.1.0'

    // ================= VALIDATION =================
    implementation 'jakarta.validation:jakarta.validation-api:3.1.1'
    implementation 'org.hibernate.validator:hibernate-validator:9.0.1.Final'

    // ================= JSON =================
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.20.0-rc1'

    // ================= CACHE / REDIS =================
    implementation 'redis.clients:jedis:6.1.0'
    implementation 'javax.cache:cache-api:1.1.1'
    implementation 'org.ehcache:ehcache:3.10.8'

    // ================= SPRING SECURITY =================
    implementation 'org.springframework.security:spring-security-core:6.3.1'
    implementation 'org.springframework.security:spring-security-web:6.3.1'
    implementation 'org.springframework.security:spring-security-config:6.3.1'
    implementation 'org.springframework.security:spring-security-taglibs:6.3.1'
    implementation 'org.springframework.security:spring-security-crypto:6.3.1'

    // optional advanced
    implementation 'org.springframework.security:spring-security-aspects:6.3.1'
    implementation 'org.springframework.security:spring-security-oauth2-core:6.3.1'
    implementation 'org.springframework.security:spring-security-oauth2-client:6.3.1'
    implementation 'org.springframework.security:spring-security-oauth2-jose:6.3.1'
    implementation 'org.springframework.security:spring-security-ldap:6.3.1'
    testImplementation 'org.springframework.security:spring-security-test:6.3.1'
}

test {
    useJUnitPlatform()
}